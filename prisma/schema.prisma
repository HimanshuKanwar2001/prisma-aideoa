generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String?
  fullName         String
  isAdmin          Boolean           @default(false)
  mobile           String?
  isEmailVerified  Boolean           @default(false)
  isMobileVerified Boolean           @default(false)
  userType         String?
  googleId         String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  transferRequests TransferRequest[] 
  students         Student[] 
  transferPairs1   TransferPair[]    @relation("User1")
  transferPairs2   TransferPair[]    @relation("User2")
  employeeIdCard   EmployeeIdCard[]
  studentIdCard    StudentIdCard[]
}

model TransferRequest {
  id                      Int               @id @default(autoincrement())
  userId                  Int
  user                    User              @relation(fields: [userId], references: [id])
  name                    String
  designation             String
  designationType         String
  aideoaIdNo              String
  mobileNumber            String
  currentPostedArea       String
  currentSubsidiary       String
  currentMinesName        String
  grade                   String
  preferredTransferSubsidiary String
  preferredTransferMine   String
  preferredTransferArea   String
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  transferPairs           TransferPair[]
}

model TransferPair {
  id               Int              @id @default(autoincrement())
  user1Id          Int
  user1            User             @relation("User1", fields: [user1Id], references: [id])
  user2Id          Int
  user2            User             @relation("User2", fields: [user2Id], references: [id])
  transferRequestId Int
  transferRequest  TransferRequest  @relation(fields: [transferRequestId], references: [id])
  transferDate     DateTime?
  status           String           @default("review")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Student {
  id               Int      @id @default(autoincrement())
  userId           Int
  enrollmentNumber String
  course           String
  yearOfStudy      Int
  institution      String
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id]) // Define relation to User
}

model SocialMediaLink {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  days        String
  title       String
  date        String
  time        String
  location    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExecutiveMember {
  id                 Int      @id @default(autoincrement())
  userId             Int
  jobTitle           String
  department         String
  yearsOfExperience  Int
  company            String
  createdAt         DateTime @default(now())
}

model Mission {
  id       Int      @id @default(autoincrement())
  mission  String   @db.VarChar(255) // Assuming a maximum length of 255 characters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id        Int      @id @default(autoincrement())
  mail      String   @db.VarChar(255) // Assuming a maximum length for the email
  otp       String   @db.VarChar(10)  // Assuming a maximum length for the OTP
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt]) // Create an index for expiration
}

model Query {
  id          String   @id @default(cuid())
  name        String
  mobile      String
  email       String
  companyName String?  @default("")
  workingArea String?  @default("")
  query       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmployeeIdCard {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  name           String
  companyName    String
  contactNo      String
  address        String

  workingArea    String
  employeeIdNo   String    @unique
  employeePhoto  String?  
  status         String    @default("pending") 
  createdAt      DateTime  @default(now())
}

model StudentIdCard {
  id             Int      @id @default(autoincrement())
   userId         Int
  user           User     @relation(fields: [userId], references: [id])
  name           String
  collegeName    String
  contactNo      String
  address        String
  studentPhoto   String?  
  universityId   String?  
  status         String    @default("pending") 
  createdAt      DateTime  @default(now())
}


model OurTeamMember {
  id           Int      @id @default(autoincrement())
  name         String
  category     String
  mobileNumber String
  email        String   @unique
  selfAddress  String
  photo        String?  // Optional field for a photo URL

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model Notification {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id            Int     @id @default(autoincrement())
  donationAmount Float
  name          String
  mobileNumber  String?   @unique
  utrNo         String   @unique
  createdAt     DateTime @default(now())
}

model Quiz {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  
  quizUrl     String   
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentNews {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmployeeNews {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LatestNews {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  images      Image[]  // Relation with Image model
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String   // URL or path to the image
  newsId    Int      // Foreign key to LatestNews
  news      LatestNews @relation(fields: [newsId], references: [id])
}

model File {
  id        Int     @id @default(autoincrement())
  name      String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Video {
  id        Int     @id @default(autoincrement())
  title     String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
